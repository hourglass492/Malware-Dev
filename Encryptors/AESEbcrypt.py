
import sys
from Crypto.Cipher import AES
from os import urandom
import hashlib
from Crypto import Random


KEY = urandom(16)

def pad(s):
    # print(s)
    x = (AES.block_size - len(s) % AES.block_size)
    s = s + x  * byte((AES.block_size - len(s) % AES.block_size))
    # print(s)
    return s

def aesenc(plaintext, key):

    k = hashlib.sha256(key).digest()
    iv = bytes('\x00' * 16, 'ascii') # urandom(16)

    # iv = tmp
    # print(iv)
    plaintext = pad(plaintext)
    cipher = AES.new(k, AES.MODE_CBC, iv)

    return cipher.encrypt(bytearray(plaintext))

def encrypt(plaintext, key):
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CFB, iv)
    return iv + cipher.encrypt(plaintext)


# try: 
plaintext = open(sys.argv[1], "rb").read()
    
# except:
#     print(sys.argv[1])
#     print(" first argument is the payload to encrypt")
#     sys.exit()

# ciphertext =  aesenc(plaintext, KEY)
ciphertext = encrypt(plaintext, KEY)
print('payload[] = {0x' + ', 0x'.join(hex(x)[2:] for x in ciphertext) + '};')
print("payload_len = %d" % len(ciphertext))
print('\n\nkey[] = {0x' + ', 0x'.join(hex(x)[2:] for x in KEY) + '};')
print("key_len = %d" % len(KEY))
